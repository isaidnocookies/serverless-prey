bucket:
  Type: AWS::S3::Bucket
  Condition: WithBucket
  Properties:
    BucketName: panther-${env:BUCKET_SUFFIX, ''}
    AccessControl: Private
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      IgnorePublicAcls: true
      BlockPublicPolicy: true
      RestrictPublicBuckets: true

lambdaVpc:
  Type: AWS::EC2::VPC
  Condition: InVpc
  Properties:
    CidrBlock: "10.42.0.0/16"

publicSubnet:
  Type: AWS::EC2::Subnet
  Condition: InVpc
  Properties:
    VpcId: !Ref lambdaVpc
    CidrBlock: "10.42.0.0/24"
    AvailabilityZone: !Select [0, !GetAZs "" ]
    MapPublicIpOnLaunch: false

internetGateway:
  Type: AWS::EC2::InternetGateway
  Condition: InVpc

lambdaGatewayAttachment:
  Type: AWS::EC2::VPCGatewayAttachment
  Condition: InVpc
  Properties:
    VpcId: !Ref lambdaVpc
    InternetGatewayId: !Ref internetGateway

publicRouteTable:
  Type: AWS::EC2::RouteTable
  Condition: InVpc
  Properties:
    VpcId: !Ref lambdaVpc

publicRoute:
  Type: AWS::EC2::Route
  Condition: InVpc
  DependsOn: [internetGateway]
  Properties:
    RouteTableId: !Ref publicRouteTable
    DestinationCidrBlock: 0.0.0.0/0
    GatewayId: !Ref internetGateway

publicSubnet1RouteTableAssociation:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Condition: InVpc
  Properties:
    SubnetId: !Ref publicSubnet
    RouteTableId: !Ref publicRouteTable

natGateway:
  Type: AWS::EC2::NatGateway
  Condition: InVpc
  DependsOn: [natPublicIP]
  Properties:
    AllocationId: !GetAtt natPublicIP.AllocationId
    SubnetId: !Ref publicSubnet

natPublicIP:
  Type: AWS::EC2::EIP
  Condition: InVpc
  DependsOn: [lambdaVpc]
  Properties:
    Domain: vpc

privateSubnet1:
  Type: AWS::EC2::Subnet
  Condition: InVpc
  Properties:
    VpcId: !Ref lambdaVpc
    CidrBlock: "10.42.1.0/24"
    AvailabilityZone: !Select [0, !GetAZs "" ]
    MapPublicIpOnLaunch: false

privateSubnet2:
  Type: AWS::EC2::Subnet
  Condition: InVpc
  Properties:
    VpcId: !Ref lambdaVpc
    CidrBlock: "10.42.2.0/24"
    AvailabilityZone: !Select [1, !GetAZs "" ]
    MapPublicIpOnLaunch: false

privateRouteTable:
  Type: AWS::EC2::RouteTable
  Condition: InVpc
  Properties:
    VpcId: !Ref lambdaVpc

privateRoute:
  Type: AWS::EC2::Route
  Condition: InVpc
  Properties:
    RouteTableId: !Ref privateRouteTable
    DestinationCidrBlock: 0.0.0.0/0
    NatGatewayId: !Ref natGateway

privateRouteTableAssnSubnet1:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Condition: InVpc
  Properties:
    RouteTableId: !Ref privateRouteTable
    SubnetId: !Ref privateSubnet1

privateRouteTableAssnSubnet2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  Condition: InVpc
  Properties:
    RouteTableId: !Ref privateRouteTable
    SubnetId: !Ref privateSubnet2

s3Endpoint:
  Type: AWS::EC2::VPCEndpoint
  Condition: InVpc
  Properties:
    PolicyDocument: |
      {
          "Statement": [{
              "Effect": "Allow",
              "Principal": "*",
                "Action": [ "s3:*" ]
          }]
      }
    RouteTableIds:
      - !Ref privateRouteTable
    ServiceName: "com.amazonaws.${self:provider.region}.s3"
    VpcId: !Ref lambdaVpc

# Not yet supported by CloudFormation:
# ssmEndpoint:
#   Type: AWS::EC2::VPCEndpoint
#   Properties:
#     PolicyDocument:
#       Version: 2012-10-17
#       Statement:
#       - Effect: Allow
#         Principal: "*"
#         Action:
#           - "ssm:*"
#         Resource:
#           - "*"
#     RouteTableIds:
#       - !Ref privateRouteTable
#     ServiceName: !Sub "com.amazonaws.${self:provider.region}.ssm"
#     VpcId: !Ref lambdaVpc

securityGroup:
  Type: "AWS::EC2::SecurityGroup"
  Condition: InVpc
  Properties:
    VpcId: !Ref lambdaVpc
    GroupDescription: "Security group for panther."
    SecurityGroupEgress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "TCP"
        FromPort: 443
        ToPort: 443
        Description: "Outbound 443 only."

flowLog:
  Type: AWS::EC2::FlowLog
  Condition: InVpc
  Properties:
    DeliverLogsPermissionArn: !GetAtt flowLogRole.Arn
    LogGroupName: !Sub "/aws/lambda/vpc/panther/flowlog"
    ResourceId: !Ref lambdaVpc
    ResourceType: "VPC"
    TrafficType: "REJECT"

flowLogRole:
  Type: AWS::IAM::Role
  Condition: InVpc
  Properties:
    Path: "/"
    AssumeRolePolicyDocument: |
      {
          "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": [ "vpc-flow-logs.amazonaws.com" ]},
              "Action": [ "sts:AssumeRole" ]
          }]
      }
    Policies:
      - PolicyName: "panther-dev-flowlog"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:DescribeLogGroups"
                - "logs:DescribeLogStreams"
                - "logs:PutLogEvents"
              Effect: "Allow"
              Resource: "*"

bucketPolicy:
  Type: "AWS::S3::BucketPolicy"
  Condition: InVpc
  Properties:
    Bucket: !Ref bucket
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Deny"
          Principal:
            AWS:
              - Fn::GetAtt: [ "IamRoleLambdaExecution", "Arn" ]
          Action:
            - "s3:*"
          Resource:
            - Fn::Join: ["", ["arn:aws:s3:::", !Ref bucket ] ]
            - Fn::Join: ["", ["arn:aws:s3:::", !Ref bucket, "/*"] ]
          Condition:
            StringNotEquals:
              "aws:sourceVpce": !Ref lambdaVpc
